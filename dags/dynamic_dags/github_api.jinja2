from airflow import DAG
from airflow.models import Variable
from airflow.decorators import task, task_group
from airflow.exceptions import (
    AirflowException,
    AirflowBadRequest,
    AirflowNotFoundException,
    AirflowFailException
)
from airflow.utils.trigger_rule import TriggerRule
from datetime import datetime


import requests
import logging
import json
import os


@task(trigger_rule=TriggerRule.ONE_FAILED, retries=1)
def extract(kind, url, params=None):
    from plugins.github_api import get_request

    return get_request(kind=kind, url=url, params=params)


@task
def transform(kind, columns, response):
    from plugins.common import deep_get
    
    logging.info(f"[{{ dag_id }}:{kind}] 데이터 변환 시작")
    transformed_data = []
    if isinstance(response, dict):
        response_items = response.get('items', [])
    elif isinstance(response, list):
        response_items = response
    else:
        logging.error("올바르지 않은 응답 형식")
        return []
        
    for item in response_items:
        transformed_item = {new_col: deep_get(item, old_col) for new_col, old_col in columns.items()}
        transformed_data.append(transformed_item)
    return transformed_data


@task
def load(kind, content, repo=None):
    from plugins.file_ops import load_as_json

    dag_root_path = os.path.dirname(os.path.abspath(__file__))
    load_as_json(dag_root_path, kind, content, repo)

{% if dag_id == "repo" %}
@task 
def _save_repo_to_redis(content):
    from plugins.redis_api import save_repo_to_redis

    try:
        for repo in content:
            _id = repo.get('ID')
            full_nm = repo.get('FULL_NM')
            if _id and full_nm:
                save_repo_to_redis(_id, full_nm)
            else:
                logging.error("레파지토리 ID 또는 FULL_NM 누락")
    except Exception as e:
        logging.error(f"레파지토리 정보 Redis 저장 실패 {e}")
{% endif %}

@task
def remove_duplicates(content):
    unique_items = []
    item_keys = set()

    for value in content.values():
        for item in value:
            item_id = item['ID']
            if item_id not in item_keys:
                unique_items.append(item)
                item_keys.add(item_id)
    return unique_items



{% if dag_id in ("repo", "meta") %}
@task_group
def etl():
{% else %}
@task_group
def etl(repo_fullnm):
{% endif %}
    result = {}
    tasks = {{ tasks }}
    for kind, task in tasks.items():
        {% if dag_id in ("repo", "meta") %}
        url = task['url']
        {% else %}
        url = task['url'].format(FULL_NM=repo_fullnm)
        {% endif %}
        try:
            if 'columns' in task:
                result[kind] = transform(kind=kind, columns=task.get('columns'), response=extract(kind=kind, url=url, params=task.get('params')))
            else:
                {% if dag_id == "repo" %}
                data = extract(kind=kind, url=url, params=task.get('params'))
                result[kind] = [{"LANG_NM": key, "LANG_BYTE": value} for key, value in data.items()]
                {% else %}
                result[kind] = extract(kind=kind, url=url, params=task.get('params'))
                {% endif %}
        except Exception as e:
            logging.error(f"[{{ dag_id }}:{kind}] 데이터 수집 실패\\n" + repr(e))
            result[kind] = None
    {% if dag_id == "repo" %}
    result = remove_duplicates(result)
    _save_repo_to_redis(result)
    {% endif %}
    {% if dag_id not in ("repo", "meta") %}
    load(kind="{{ dag_id }}", content=result, repo= repo_fullnm.replace("/", "_"))
    {% else %}
    load(kind="{{ dag_id }}", content=result)
    {% endif %}


with DAG(
    dag_id="github_{{ dag_id }}",
    start_date=datetime(2023, 8, 24),
    schedule='{{ schedule }}',
    catchup={{ catchup or True }}
) as dag:
    {% if dag_id not in ("repo", "meta") %}
    from plugins.redis_api import get_all_repo_data_from_redis
    
    repositories = get_all_repo_data_from_redis()
    for repo_info in repositories.values():
        etl(repo_info.get("FULL_NM"))
    {% else %}
    etl()
    {% endif %}