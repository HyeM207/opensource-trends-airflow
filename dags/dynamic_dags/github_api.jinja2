from airflow import DAG
from airflow.models import Variable
from airflow.decorators import task, task_group
from airflow.exceptions import (
    AirflowException,
    AirflowBadRequest,
    AirflowNotFoundException,
    AirflowFailException
)
from airflow.utils.trigger_rule import TriggerRule
from datetime import datetime
from datetime import timedelta

import requests
import logging
import json


def get_header():
    token = Variable.get("github_token")
    api_version = Variable.get("git_api_version")
    return {
        "Accept": "application/vnd.github+json",
        "Authorization": f"Bearer {token}",
        "X-GitHub-Api-Version": api_version
    }


@task(trigger_rule=TriggerRule.ONE_FAILED, retries=1)
def extract(kind, url, params=None):
    try:
        logging.info(f"[{kind}] 데이터 수집 시작")
        headers = get_header()
        response = requests.get(url=url, 
                                headers=headers,
                                params=params)
        # 200이 아닌 경우 에러 발생
        if response.status_code == 200:
            return response.json()
        elif response.status_code == 400:
            raise AirflowBadRequest(f"[{kind}] 데이터 수집 실패\\n" + response.content)
        elif response.status_code == 401:
            raise AirflowException(f"[{kind}] 데이터 수집 실패\\n" + response.content)
        elif response.status_code == 404:
            return AirflowNotFoundException(f"[{kind}] 데이터 수집 실패\\n" + response.content)
        else:
            raise AirflowFailException(f"[{kind}] 데이터 수집 실패\\n" + response.content)
    except Exception as e:
        raise AirflowFailException(f"[{kind}] 데이터 수집 실패\\n" + repr(e))


@task
def load_as_json(kind, content):
    with open(f"result/{kind}.json", 'w') as f:
        json.dump(content, f)
    if isinstance(content, list):
        logging.info(f"[{kind}] 데이터 수집 완료 | 데이터 수: {len(content)}")
    else:
        logging.info(f"[{kind}] 데이터 수집 완료")


@task_group
def get_requests():
    tasks = {{ tasks }}
    result = {}
    for kind, task in tasks.items():
        try:
            result[kind] = extract(kind=kind, url=task.get('url'), params = task.get('params'))
        except Exception as e:
            logging.error(f"[{kind}-{kind}] 데이터 수집 실패\\n" + repr(e))
            result[kind] = None
    return result


with DAG(
    dag_id="github_{{ dag_id }}",
    start_date=datetime(2023, 6, 15),
    schedule='{{ schedule }}',
    catchup={{ catchup or True }}
) as dag:
    load_as_json("{{ dag_id }}", get_requests())